library ieee;
use ieee.std_logic_1164.all;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
--use IEEE.std_logic_signed.all;
use ieee.numeric_std.all;

package MAX268 is
	component max268Comp is
	port (
		clk : in std_logic;
	
		freqValueIn : in std_logic_vector(15 downto 0);
		
		pwmOut : out std_logic;
		FN : out std_logic_vector(4 downto 0)
	);
	end component max268Comp;
end package MAX268;

library ieee;
use ieee.std_logic_1164.all;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
--use IEEE.std_logic_signed.all;
use ieee.numeric_std.all;
use work.squareWave.all;

entity max268Comp is
	port (
		clk : in std_logic;
	
		freqValueIn : in std_logic_vector(15 downto 0);
		
		pwmOut : out std_logic;
		FN : out std_logic_vector(4 downto 0)
	);
end entity max268Comp;

architecture Behavioral of max268Comp is
	
	type row is array (0 to 31) of integer;
	type table is array (0 to 30) of row;
	
	signal freqTable : table;
	signal pwmFreqValue : std_logic_vector (7 downto 0) := x"0F";
		
begin

	pwm: squareWaveComp port map (
		clock => clk,
		freqOut => pwmOut,
		freqSelect => pwmFreqValue
	);

	init: process(clk)
	variable initialize : std_logic := '0';
	begin
		if (rising_edge(clk)) then
			if (initialize = '0') then
				freqTable(0) <= (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
				freqTable(1) <= (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
				freqTable(2) <= (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64697,63157,61688,60286);
				freqTable(3) <= (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64175,62170,60286,58513,56841,55262,53769,52354,51011,49736,48523,47368,46266,45214);
				freqTable(4) <= (0,0,0,0,0,0,0,0,0,0,0,0,63662,61213,58946,56841,54881,53052,51340,49736,48229,46810,45473,44210,43015,41883,40809,39789,38818,37894,37013,36172);
				freqTable(5) <= (0,0,0,0,0,0,0,0,63157,60286,57665,55262,53052,51011,49122,47368,45734,44210,42784,41447,40191,39009,37894,36841,35846,34902,34007,33157,32349,31578,30844,30143);
				freqTable(6) <= (0,0,0,0,0,63157,59833,56841,54134,51674,49427,47368,45473,43724,42104,40601,39201,37894,36672,35526,34449,33436,32481,31578,30725,29916,29149,28421,27727,27067,26438,25837);
				freqTable(7) <= (0,0,0,62170,58513,55262,52354,49736,47368,45214,43249,41447,39789,38258,36841,35526,34301,33157,32088,31085,30143,29256,28421,27631,26884,26177,25506,24868,24261,23684,23133,22607);
				freqTable(8) <= (0,63157,58946,55262,52011,49122,46537,44210,42104,40191,38443,36841,35368,34007,32748,31578,30489,29473,28522,27631,26794,26006,25263,24561,23897,23268,22672,22105,21566,21052,20563,20095);
				freqTable(9) <= (61213,56841,53052,49736,46810,44210,41883,39789,37894,36172,34599,33157,31831,30607,29473,28421,27441,26526,25670,24868,24114,23405,22736,22105,21507,20941,20404,19894,19409,18947,18506,18086);
				freqTable(10) <= (55649,51674,48229,45214,42555,40191,38075,36172,34449,32883,31454,30143,28937,27824,26794,25837,24946,24114,23337,22607,21922,21277,20669,20095,19552,19038,18550,18086,17645,17225,16824,16442);
				freqTable(11) <= (51011,47368,44210,41447,39009,36841,34902,33157,31578,30143,28832,27631,26526,25506,24561,23684,22867,22105,21392,20723,20095,19504,18947,18421,17923,17451,17004,16579,16174,15789,15422,15071);
				freqTable(12) <= (47087,43724,40809,38258,36008,34007,32218,30607,29149,27824,26615,25506,24485,23544,22672,21862,21108,20404,19746,19129,18550,18004,17490,17004,16544,16109,15696,15303,14930,14575,14236,13912);
				freqTable(13) <= (43724,40601,37894,35526,33436,31578,29916,28421,27067,25837,24714,23684,22736,21862,21052,20300,19600,18947,18336,17763,17225,16718,16240,15789,15362,14958,14575,14210,13864,13534,13219,12918);
				freqTable(14) <= (40809,37894,35368,33157,31207,29473,27922,26526,25263,24114,23066,22105,21221,20404,19649,18947,18294,17684,17113,16579,16076,15603,15158,14737,14338,13961,13603,13263,12939,12631,12338,12057);
				freqTable(15) <= (38258,35526,33157,31085,29256,27631,26177,24868,23684,22607,21624,20723,19894,19129,18421,17763,17150,16579,16044,15542,15071,14628,14210,13816,13442,13088,12753,12434,12131,11842,11566,11304);
				freqTable(16) <= (36008,33436,31207,29256,27535,26006,24637,23405,22291,21277,20352,19504,18724,18004,17337,16718,16141,15603,15100,14628,14185,13768,13374,13003,12651,12318,12003,11703,11417,11145,10886,10639);
				freqTable(17) <= (34007,31578,29473,27631,26006,24561,23268,22105,21052,20095,19222,18421,17684,17004,16374,15789,15245,14737,14261,13816,13397,13003,12631,12280,11949,11634,11336,11052,10783,10526,10281,10048);
				freqTable(18) <= (32218,29916,27922,26177,24637,23268,22044,20941,19944,19038,18210,17451,16753,16109,15512,14958,14442,13961,13511,13088,12692,12318,11967,11634,11320,11022,10739,10471,10215,9972,9740,9519);
				freqTable(19) <= (30607,28421,26526,24868,23405,22105,20941,19894,18947,18086,17299,16579,15915,15303,14737,14210,13720,13263,12835,12434,12057,11703,11368,11052,10754,10471,10202,9947,9705,9474,9253,9043);
				freqTable(20) <= (29149,27067,25263,23684,22291,21052,19944,18947,18045,17225,16476,15789,15158,14575,14035,13534,13067,12631,12224,11842,11483,11145,10827,10526,10242,9972,9716,9474,9242,9022,8813,8612);
				freqTable(21) <= (27824,25837,24114,22607,21277,20095,19038,18086,17225,16442,15727,15071,14469,13912,13397,12918,12473,12057,11668,11304,10961,10639,10335,10048,9776,9519,9275,9043,8822,8612,8412,8221);
				freqTable(22) <= (26615,24714,23066,21624,20352,19222,18210,17299,16476,15727,15043,14416,13840,13307,12814,12357,11931,11533,11161,10812,10485,10176,9885,9611,9351,9105,8872,8650,8439,8238,8046,7863);
				freqTable(23) <= (25506,23684,22105,20723,19504,18421,17451,16579,15789,15071,14416,13816,13263,12753,12280,11842,11434,11052,10696,10362,10048,9752,9474,9210,8961,8726,8502,8289,8087,7895,7711,7536);
				freqTable(24) <= (24485,22736,21221,19894,18724,17684,16753,15915,15158,14469,13840,13263,12732,12243,11789,11368,10976,10610,10268,9947,9646,9362,9095,8842,8603,8377,8162,7958,7764,7579,7403,7234);
				freqTable(25) <= (23544,21862,20404,19129,18004,17004,16109,15303,14575,13912,13307,12753,12243,11772,11336,10931,10554,10202,9873,9565,9275,9002,8745,8502,8272,8054,7848,7652,7465,7287,7118,6956);
				freqTable(26) <= (22672,21052,19649,18421,17337,16374,15512,14737,14035,13397,12814,12280,11789,11336,10916,10526,10163,9824,9507,9210,8931,8669,8421,8187,7966,7756,7557,7368,7189,7017,6854,6698);
				freqTable(27) <= (21862,20300,18947,17763,16718,15789,14958,14210,13534,12918,12357,11842,11368,10931,10526,10150,9800,9474,9168,8881,8612,8359,8120,7895,7681,7479,7287,7105,6932,6767,6609,6459);
				freqTable(28) <= (21108,19600,18294,17150,16141,15245,14442,13720,13067,12473,11931,11434,10976,10554,10163,9800,9462,9147,8852,8575,8315,8071,7840,7622,7416,7221,7036,6860,6693,6533,6382,6236);
				freqTable(29) <= (20404,18947,17684,16579,15603,14737,13961,13263,12631,12057,11533,11052,10610,10202,9824,9474,9147,8842,8557,8289,8038,7802,7579,7368,7169,6980,6801,6631,6470,6316,6169,6029);
				freqTable(30) <= (19746,18336,17113,16044,15100,14261,13511,12835,12224,11668,11161,10696,10268,9873,9507,9168,8852,8557,8281,8022,7779,7550,7334,7131,6938,6755,6582,6418,6261,6112,5970,5834);
				
				initialize := '1';
			end if;
		end if;
	end process;
	
	process(clk)
		variable desiredFreq : integer;
		variable setFreq : std_logic_vector(15 downto 0) := x"0000";
		variable closestFreq, closestError, closestRow, closestColumn : integer;
		variable currentFreq, currentError, currentRow, CurrentColumn : integer;
		
		variable setFlag : std_logic := '0';
		variable initFlag : std_logic := '0';
		
		variable tempDataVector : std_logic_vector (15 downto 0);
	begin
		if (rising_edge(clk)) then
			if (freqValueIn = setFreq) then
				setFlag := '0';
				initFlag := '0';
			else
				if (setFlag = '0') then
					if (initFlag = '0') then
						desiredFreq := conv_integer(unsigned(freqValueIn));
						
						closestFreq := 0;
						closestError := 65535;
						closestRow := 0;
						closestColumn := 0;
						
						currentFreq := 0;
						currentError := 0;
						currentRow := 0;
						currentColumn := 0;
						
						initFlag := '1';
					else
						
						--Perform Comparisons between current, desired, and closest
						currentFreq := freqTable(currentRow)(currentColumn);
						currentError := abs(desiredFreq - currentFreq);
						if (currentError < closestError) then
							closestFreq := currentFreq;
							closestError := currentError;
							closestRow := currentRow;
							closestColumn := currentColumn;
						end if;
						
						currentColumn := currentColumn + 1;
						if (currentColumn > 31) then
							currentColumn := 0;
							currentRow := currentRow + 1;
							if (currentRow > 30) then
								--Iterated through entire Frequency Table
								--Set Frequency Value for filters by adjusting PWM (fo) and Fn 
								pwmFreqValue <= conv_std_logic_vector(closestRow, 8);
								FN <= conv_std_logic_vector(closestColumn, 5);
								
								setFreq := freqValueIn;
								setFlag := '1';
							end if;
						end if;
					
					end if;
				end if;
			end if;

		end if;
	end process;

end architecture Behavioral;
